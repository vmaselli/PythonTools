# Cluster align config script

#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#READ ALIGNER :::::: BLAT
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


# Number of reads per file
# This value can be decreased for slower read aligners like SHRIMP, although this will also depend on the size of your cluster, it is not advised to decrease beyond 100,000 unless you have 100+ nodes at your disposal
length_parameter = 200000

#$$$$$$$$$$$$
#	FILES
#$$$$$$$$$$$$

# Read files
read_file1 = TESTDIR/s_1_1_sequence.txt

# specify none if you dont need paired-end analysis
read_file2 = TESTDIR/s_1_2_sequence.txt


#please insert full path to reference index
ref_file1 = TESTDIR/test_genome.2bit
ref_file2 = none


output_directory = /path/to/output_directory


# test reads used for the "testmode" option
test_read_file1 = TESTDIR/s_1_1_sequence.txt
test_read_file2 = TESTDIR/s_1_2_sequence.txt


#-----------------------------------------
#		Read directory
#-----------------------------------------


#The read directory specifies an entire directory of read files you wish to align
# PLEASE NOTE: These files require a simlar prefix and suffix to be detected 

read_directory = none

#for read files in the direcory, only select files with the following prefix eg. (s_) s_1_sequence.FASTQ
read_prefix = s_

#for read files in the direcory, only select files with the following suffix eg. (FASTQ) s_1_sequence.FASTQ
read_suffix= txt

# prefix for paired reads - this means that the aligner will group reads that start with the same X letters
# example
# s_1_1_seq.fastq s_1_2_seq.fastq
#the prefix is s_1
# it is the first 3 letters

paired_prefix_length = 3

#=======================
# Pipeline analysis stages
#=======================

#--------------------------
#GENERAL SYNTAX 
#--------------------------

# Name the reads: ALIGNER_Read1 / ALIGNER_Read2
# Name the reference: ALIGNER_Ref1 / ALIGNER_Ref2


#--------------------------
# Read preprocessing
#--------------------------
# Syntax Read input 	pp_Read -> pp_Out 
#          				pp_In -> pp_Out


# include the commands needed to take the FASTQ read format and convert into the format required by the desired aligner ie. BLAT - converstion from FASTQ - FASTA - 2bit
# If not necessary specify none

### EXAMPLE ##### read_pp = /home/hep/emmett/software/toolkit/bin/fastq_to_fasta -i pp_Read -o pp_Out

read_pp = SOFTWAREDIR/toolkit/bin/fastq_to_fasta -i pp_Read -o pp_Out

#--------------------------
# Node analysis
#--------------------------

# Name the reads (specify both if you are using paired-end mapping): ALIGNER_Read1 / ALIGNER_Read2
# Name the reference: ALIGNER_Ref1 / ALIGNER_Ref2
# Name the final output match file: ALIGNER_output1 / ALIGNER_output2 / ALIGNER_output3

# If there are multiple steps name input file for progressive steps as: ALIGNER_in1 / ALIGNER_in2 / ALIGNER_in3
# The number of the input marker is linked to the output marker you have used ie.
#  If you use ALIGNER_output1 in the first line and you want to access this file in the next line use ALIGNER_in1

# use full aligner path only use aligner name if it is in the environmental variable $PATH!

# Specify the commands required to run the aligner
# multiple lines must be separated only by a \n

single_node_analysis = SOFTWAREDIR/BLAT/blat ALIGNER_Ref1 ALIGNER_Read1 ALIGNER_output1
paired_node_analysis = none

#--------------------------
# Post analysis steps
#--------------------------
# Name the reads (specify both if you are using paired-end mapping): ALIGNER_Read1 / ALIGNER_Read2
# Name the reference: ALIGNER_Ref1 / ALIGNER_Ref2
# Name the output files: ALIGNER_output1 / ALIGNER_output2 / ALIGNER_output3
# If there are multiple steps name input file for progressive steps as: ALIGNER_in1 / ALIGNER_in2 / ALIGNER_in3 - this is linked to the outputs
# ie ALIGNER_output3 - > ALIGNER_in3 
# Output files from the node_analysis can be retrieved with: Results_1 / Results_2 / Results_3

# The number of the result indicates which files you have specified as output IN THE NODE ANALYSIS SECTION.
# IE. ALIGNER_output1 (From single_node_analysis) == Results_1
###### EXAMPLE : post_analysis = /software/cufflinks/cufflinks-0.7.0.Linux_x86_64/cufflinks -p 4 Results_1


post_analysis =none

#=======================
# Cluster information
#=======================

#cluster queue
cluster_queue = input_CLUSTERQUEUE

#username
username = input_USERNAME

# ammount of memory to keep available for the node
node_mem = input_NODEMEM

